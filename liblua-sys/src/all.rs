#![allow(non_camel_case_types,non_snake_case)]
/* automatically generated by rust-bindgen */

pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = ::std::os::raw::c_long;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub enum Struct_lua_State { }
pub type lua_State = Struct_lua_State;
pub type lua_Number = ::std::os::raw::c_double;
pub type lua_Integer = ::std::os::raw::c_longlong;
pub type lua_Unsigned = ::std::os::raw::c_ulonglong;
pub type lua_KContext = intptr_t;
pub type lua_CFunction =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State)
                              -> ::std::os::raw::c_int>;
pub type lua_KFunction =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State,
                                               status: ::std::os::raw::c_int,
                                               ctx: lua_KContext)
                              -> ::std::os::raw::c_int>;
pub type lua_Reader =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State,
                                               ud:
                                                   *mut ::std::os::raw::c_void,
                                               sz: *mut size_t)
                              -> *const ::std::os::raw::c_char>;
pub type lua_Writer =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State,
                                               p:
                                                   *const ::std::os::raw::c_void,
                                               sz: size_t,
                                               ud:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type lua_Alloc =
    ::std::option::Option<unsafe extern "C" fn(ud:
                                                   *mut ::std::os::raw::c_void,
                                               ptr:
                                                   *mut ::std::os::raw::c_void,
                                               osize: size_t, nsize: size_t)
                              -> *mut ::std::os::raw::c_void>;
pub type lua_Debug = Struct_lua_Debug;
pub type lua_Hook =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State,
                                               ar: *mut lua_Debug)>;
pub enum Struct_CallInfo { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lua_Debug {
    pub event: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub namewhat: *const ::std::os::raw::c_char,
    pub what: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
    pub currentline: ::std::os::raw::c_int,
    pub linedefined: ::std::os::raw::c_int,
    pub lastlinedefined: ::std::os::raw::c_int,
    pub nups: ::std::os::raw::c_uchar,
    pub nparams: ::std::os::raw::c_uchar,
    pub isvararg: ::std::os::raw::c_char,
    pub istailcall: ::std::os::raw::c_char,
    pub short_src: [::std::os::raw::c_char; 60usize],
    pub i_ci: *mut Struct_CallInfo,
}
impl ::std::clone::Clone for Struct_lua_Debug {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lua_Debug {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed2;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed4,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed6;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum___codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_luaL_Reg {
    pub name: *const ::std::os::raw::c_char,
    pub func: lua_CFunction,
}
impl ::std::clone::Clone for Struct_luaL_Reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_luaL_Reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type luaL_Reg = Struct_luaL_Reg;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_luaL_Buffer {
    pub b: *mut ::std::os::raw::c_char,
    pub size: size_t,
    pub n: size_t,
    pub L: *mut lua_State,
    pub initb: [::std::os::raw::c_char; 8192usize],
}
impl ::std::clone::Clone for Struct_luaL_Buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_luaL_Buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type luaL_Buffer = Struct_luaL_Buffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_luaL_Stream {
    pub f: *mut FILE,
    pub closef: lua_CFunction,
}
impl ::std::clone::Clone for Struct_luaL_Stream {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_luaL_Stream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type luaL_Stream = Struct_luaL_Stream;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut lua_ident: *const ::std::os::raw::c_char;
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_newstate(f: lua_Alloc, ud: *mut ::std::os::raw::c_void)
     -> *mut lua_State;
    pub fn lua_close(L: *mut lua_State);
    pub fn lua_newthread(L: *mut lua_State) -> *mut lua_State;
    pub fn lua_atpanic(L: *mut lua_State, panicf: lua_CFunction)
     -> lua_CFunction;
    pub fn lua_version(L: *mut lua_State) -> *const lua_Number;
    pub fn lua_absindex(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_gettop(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn lua_settop(L: *mut lua_State, idx: ::std::os::raw::c_int);
    pub fn lua_pushvalue(L: *mut lua_State, idx: ::std::os::raw::c_int);
    pub fn lua_rotate(L: *mut lua_State, idx: ::std::os::raw::c_int,
                      n: ::std::os::raw::c_int);
    pub fn lua_copy(L: *mut lua_State, fromidx: ::std::os::raw::c_int,
                    toidx: ::std::os::raw::c_int);
    pub fn lua_checkstack(L: *mut lua_State, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_xmove(from: *mut lua_State, to: *mut lua_State,
                     n: ::std::os::raw::c_int);
    pub fn lua_isnumber(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_isstring(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_iscfunction(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_isinteger(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_isuserdata(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_type(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_typename(L: *mut lua_State, tp: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn lua_tonumberx(L: *mut lua_State, idx: ::std::os::raw::c_int,
                         isnum: *mut ::std::os::raw::c_int) -> lua_Number;
    pub fn lua_tointegerx(L: *mut lua_State, idx: ::std::os::raw::c_int,
                          isnum: *mut ::std::os::raw::c_int) -> lua_Integer;
    pub fn lua_toboolean(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_tolstring(L: *mut lua_State, idx: ::std::os::raw::c_int,
                         len: *mut size_t) -> *const ::std::os::raw::c_char;
    pub fn lua_rawlen(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> size_t;
    pub fn lua_tocfunction(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> lua_CFunction;
    pub fn lua_touserdata(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn lua_tothread(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> *mut lua_State;
    pub fn lua_topointer(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_void;
    pub fn lua_arith(L: *mut lua_State, op: ::std::os::raw::c_int);
    pub fn lua_rawequal(L: *mut lua_State, idx1: ::std::os::raw::c_int,
                        idx2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn lua_compare(L: *mut lua_State, idx1: ::std::os::raw::c_int,
                       idx2: ::std::os::raw::c_int, op: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_pushnil(L: *mut lua_State);
    pub fn lua_pushnumber(L: *mut lua_State, n: lua_Number);
    pub fn lua_pushinteger(L: *mut lua_State, n: lua_Integer);
    pub fn lua_pushlstring(L: *mut lua_State,
                           s: *const ::std::os::raw::c_char, len: size_t)
     -> *const ::std::os::raw::c_char;
    pub fn lua_pushstring(L: *mut lua_State, s: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn lua_pushvfstring(L: *mut lua_State,
                            fmt: *const ::std::os::raw::c_char, argp: va_list)
     -> *const ::std::os::raw::c_char;
    pub fn lua_pushfstring(L: *mut lua_State,
                           fmt: *const ::std::os::raw::c_char, ...)
     -> *const ::std::os::raw::c_char;
    pub fn lua_pushcclosure(L: *mut lua_State, _fn: lua_CFunction,
                            n: ::std::os::raw::c_int);
    pub fn lua_pushboolean(L: *mut lua_State, b: ::std::os::raw::c_int);
    pub fn lua_pushlightuserdata(L: *mut lua_State,
                                 p: *mut ::std::os::raw::c_void);
    pub fn lua_pushthread(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn lua_getglobal(L: *mut lua_State,
                         name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn lua_gettable(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_getfield(L: *mut lua_State, idx: ::std::os::raw::c_int,
                        k: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn lua_geti(L: *mut lua_State, idx: ::std::os::raw::c_int,
                    n: lua_Integer) -> ::std::os::raw::c_int;
    pub fn lua_rawget(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_rawgeti(L: *mut lua_State, idx: ::std::os::raw::c_int,
                       n: lua_Integer) -> ::std::os::raw::c_int;
    pub fn lua_rawgetp(L: *mut lua_State, idx: ::std::os::raw::c_int,
                       p: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn lua_createtable(L: *mut lua_State, narr: ::std::os::raw::c_int,
                           nrec: ::std::os::raw::c_int);
    pub fn lua_newuserdata(L: *mut lua_State, sz: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn lua_getmetatable(L: *mut lua_State,
                            objindex: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_getuservalue(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_setglobal(L: *mut lua_State,
                         name: *const ::std::os::raw::c_char);
    pub fn lua_settable(L: *mut lua_State, idx: ::std::os::raw::c_int);
    pub fn lua_setfield(L: *mut lua_State, idx: ::std::os::raw::c_int,
                        k: *const ::std::os::raw::c_char);
    pub fn lua_seti(L: *mut lua_State, idx: ::std::os::raw::c_int,
                    n: lua_Integer);
    pub fn lua_rawset(L: *mut lua_State, idx: ::std::os::raw::c_int);
    pub fn lua_rawseti(L: *mut lua_State, idx: ::std::os::raw::c_int,
                       n: lua_Integer);
    pub fn lua_rawsetp(L: *mut lua_State, idx: ::std::os::raw::c_int,
                       p: *const ::std::os::raw::c_void);
    pub fn lua_setmetatable(L: *mut lua_State,
                            objindex: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_setuservalue(L: *mut lua_State, idx: ::std::os::raw::c_int);
    pub fn lua_callk(L: *mut lua_State, nargs: ::std::os::raw::c_int,
                     nresults: ::std::os::raw::c_int, ctx: lua_KContext,
                     k: lua_KFunction);
    pub fn lua_pcallk(L: *mut lua_State, nargs: ::std::os::raw::c_int,
                      nresults: ::std::os::raw::c_int,
                      errfunc: ::std::os::raw::c_int, ctx: lua_KContext,
                      k: lua_KFunction) -> ::std::os::raw::c_int;
    pub fn lua_load(L: *mut lua_State, reader: lua_Reader,
                    dt: *mut ::std::os::raw::c_void,
                    chunkname: *const ::std::os::raw::c_char,
                    mode: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn lua_dump(L: *mut lua_State, writer: lua_Writer,
                    data: *mut ::std::os::raw::c_void,
                    strip: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn lua_yieldk(L: *mut lua_State, nresults: ::std::os::raw::c_int,
                      ctx: lua_KContext, k: lua_KFunction)
     -> ::std::os::raw::c_int;
    pub fn lua_resume(L: *mut lua_State, from: *mut lua_State,
                      narg: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn lua_status(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn lua_isyieldable(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn lua_gc(L: *mut lua_State, what: ::std::os::raw::c_int,
                  data: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn lua_error(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn lua_next(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn lua_concat(L: *mut lua_State, n: ::std::os::raw::c_int);
    pub fn lua_len(L: *mut lua_State, idx: ::std::os::raw::c_int);
    pub fn lua_stringtonumber(L: *mut lua_State,
                              s: *const ::std::os::raw::c_char) -> size_t;
    pub fn lua_getallocf(L: *mut lua_State,
                         ud: *mut *mut ::std::os::raw::c_void) -> lua_Alloc;
    pub fn lua_setallocf(L: *mut lua_State, f: lua_Alloc,
                         ud: *mut ::std::os::raw::c_void);
    pub fn lua_getstack(L: *mut lua_State, level: ::std::os::raw::c_int,
                        ar: *mut lua_Debug) -> ::std::os::raw::c_int;
    pub fn lua_getinfo(L: *mut lua_State, what: *const ::std::os::raw::c_char,
                       ar: *mut lua_Debug) -> ::std::os::raw::c_int;
    pub fn lua_getlocal(L: *mut lua_State, ar: *const lua_Debug,
                        n: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn lua_setlocal(L: *mut lua_State, ar: *const lua_Debug,
                        n: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn lua_getupvalue(L: *mut lua_State, funcindex: ::std::os::raw::c_int,
                          n: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn lua_setupvalue(L: *mut lua_State, funcindex: ::std::os::raw::c_int,
                          n: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn lua_upvalueid(L: *mut lua_State, fidx: ::std::os::raw::c_int,
                         n: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn lua_upvaluejoin(L: *mut lua_State, fidx1: ::std::os::raw::c_int,
                           n1: ::std::os::raw::c_int,
                           fidx2: ::std::os::raw::c_int,
                           n2: ::std::os::raw::c_int);
    pub fn lua_sethook(L: *mut lua_State, func: lua_Hook,
                       mask: ::std::os::raw::c_int,
                       count: ::std::os::raw::c_int);
    pub fn lua_gethook(L: *mut lua_State) -> lua_Hook;
    pub fn lua_gethookmask(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn lua_gethookcount(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn luaL_checkversion_(L: *mut lua_State, ver: lua_Number, sz: size_t);
    pub fn luaL_getmetafield(L: *mut lua_State, obj: ::std::os::raw::c_int,
                             e: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_callmeta(L: *mut lua_State, obj: ::std::os::raw::c_int,
                         e: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_tolstring(L: *mut lua_State, idx: ::std::os::raw::c_int,
                          len: *mut size_t) -> *const ::std::os::raw::c_char;
    pub fn luaL_argerror(L: *mut lua_State, arg: ::std::os::raw::c_int,
                         extramsg: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_checklstring(L: *mut lua_State, arg: ::std::os::raw::c_int,
                             l: *mut size_t) -> *const ::std::os::raw::c_char;
    pub fn luaL_optlstring(L: *mut lua_State, arg: ::std::os::raw::c_int,
                           def: *const ::std::os::raw::c_char, l: *mut size_t)
     -> *const ::std::os::raw::c_char;
    pub fn luaL_checknumber(L: *mut lua_State, arg: ::std::os::raw::c_int)
     -> lua_Number;
    pub fn luaL_optnumber(L: *mut lua_State, arg: ::std::os::raw::c_int,
                          def: lua_Number) -> lua_Number;
    pub fn luaL_checkinteger(L: *mut lua_State, arg: ::std::os::raw::c_int)
     -> lua_Integer;
    pub fn luaL_optinteger(L: *mut lua_State, arg: ::std::os::raw::c_int,
                           def: lua_Integer) -> lua_Integer;
    pub fn luaL_checkstack(L: *mut lua_State, sz: ::std::os::raw::c_int,
                           msg: *const ::std::os::raw::c_char);
    pub fn luaL_checktype(L: *mut lua_State, arg: ::std::os::raw::c_int,
                          t: ::std::os::raw::c_int);
    pub fn luaL_checkany(L: *mut lua_State, arg: ::std::os::raw::c_int);
    pub fn luaL_newmetatable(L: *mut lua_State,
                             tname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_setmetatable(L: *mut lua_State,
                             tname: *const ::std::os::raw::c_char);
    pub fn luaL_testudata(L: *mut lua_State, ud: ::std::os::raw::c_int,
                          tname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn luaL_checkudata(L: *mut lua_State, ud: ::std::os::raw::c_int,
                           tname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn luaL_where(L: *mut lua_State, lvl: ::std::os::raw::c_int);
    pub fn luaL_error(L: *mut lua_State,
                      fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn luaL_checkoption(L: *mut lua_State, arg: ::std::os::raw::c_int,
                            def: *const ::std::os::raw::c_char,
                            lst: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_fileresult(L: *mut lua_State, stat: ::std::os::raw::c_int,
                           fname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_execresult(L: *mut lua_State, stat: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn luaL_ref(L: *mut lua_State, t: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn luaL_unref(L: *mut lua_State, t: ::std::os::raw::c_int,
                      _ref: ::std::os::raw::c_int);
    pub fn luaL_loadfilex(L: *mut lua_State,
                          filename: *const ::std::os::raw::c_char,
                          mode: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_loadbufferx(L: *mut lua_State,
                            buff: *const ::std::os::raw::c_char, sz: size_t,
                            name: *const ::std::os::raw::c_char,
                            mode: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_loadstring(L: *mut lua_State,
                           s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_newstate() -> *mut lua_State;
    pub fn luaL_len(L: *mut lua_State, idx: ::std::os::raw::c_int)
     -> lua_Integer;
    pub fn luaL_gsub(L: *mut lua_State, s: *const ::std::os::raw::c_char,
                     p: *const ::std::os::raw::c_char,
                     r: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn luaL_setfuncs(L: *mut lua_State, l: *const luaL_Reg,
                         nup: ::std::os::raw::c_int);
    pub fn luaL_getsubtable(L: *mut lua_State, idx: ::std::os::raw::c_int,
                            fname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn luaL_traceback(L: *mut lua_State, L1: *mut lua_State,
                          msg: *const ::std::os::raw::c_char,
                          level: ::std::os::raw::c_int);
    pub fn luaL_requiref(L: *mut lua_State,
                         modname: *const ::std::os::raw::c_char,
                         openf: lua_CFunction, glb: ::std::os::raw::c_int);
    pub fn luaL_buffinit(L: *mut lua_State, B: *mut luaL_Buffer);
    pub fn luaL_prepbuffsize(B: *mut luaL_Buffer, sz: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn luaL_addlstring(B: *mut luaL_Buffer,
                           s: *const ::std::os::raw::c_char, l: size_t);
    pub fn luaL_addstring(B: *mut luaL_Buffer,
                          s: *const ::std::os::raw::c_char);
    pub fn luaL_addvalue(B: *mut luaL_Buffer);
    pub fn luaL_pushresult(B: *mut luaL_Buffer);
    pub fn luaL_pushresultsize(B: *mut luaL_Buffer, sz: size_t);
    pub fn luaL_buffinitsize(L: *mut lua_State, B: *mut luaL_Buffer,
                             sz: size_t) -> *mut ::std::os::raw::c_char;
    pub fn luaopen_base(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_coroutine(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_table(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_io(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_os(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_string(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_utf8(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_bit32(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_math(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_debug(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaopen_package(L: *mut lua_State) -> ::std::os::raw::c_int;
    pub fn luaL_openlibs(L: *mut lua_State);
}
